LPIC資格学習用メモ　

動作しているPCはソフト・ハードに分けられる
基本ソフトウェア（OS）Windows.Linux.mac
応用ソフトウェアexcel.pp.word

基本ソフトウェア（OS）は部品の提供、ソースの管理が役割でカーネルとユーザランドで成り立っている。
シェル・・・対話型のコマンド入力環境
　　　　　　入力を受け付ける＆シェルスタンド実行する。（コマンドの入力を自動化）

誰でもLinuxをインストールできるように・・・Linuxディストリビューションの始まり
パッケージ・・・ソースをビルドする手間を省くためのもの
パッケージマネージャ・・・パッケージを簡単にインストールしたりアップデートするもの

コマンド集（オプションは記載なし）

・ｌｓ　オプション　ファイル名　　　　　　　ファイルやディレクトリの一覧を取得

・ｃｐ　オプション　コピー元　コピー先　　　ファイルのコピー

・ｍｖ　移動元ファイル　移動先ファイル　　　ファイルの移動

・ｒｍ　ファイル名　　　　　　　　　　　　　ファイルの削除

・ｐｗｄ　　　　　　　　　　　　　　　　　　現在のディレクトリの表示

・ｃｄ　ディレクトリ名　　　　　　　　　　　ディレクトリの移動

・ｍｋｄiｒ　ディレクトリ名　　　　　　　　ディレクトリの作成

・ｒｍｄiｒ　ディレクトリ名　　　　　　　　ディレクトリの削除

・　.　                                  カレントディレクトリ

・　..　　　　　　　　　　　　　　　　　　 親ディレクトリ

・～　　　　　　　　　　　　　　　　　　　 ホームディレクトリ

・/　　　　　　　　　　　　　　　　　　　 ルートディレクトリ

・ｃa t　　ファイル名　　　　　　　　　　　ファイルの中身を表示

・more/less ファイル名　　　　　　　　　　ページャを使ったファイル閲覧

・find パス　-name 検索ファイル名 　　　　ファイルの検索（一部合致もできる）

・which　コマンド名　　　　　　　　　　　　コマンドのパス検索

・コマンド　--help　　　　　　　　　　　　コマンドのオプションを調べる

・man コマンド名　　　　　　　　　　　　　コマンドのマニュアルを表示　　


正規表現とパイプ
標準入力　→　コマンドプロセス　→　標準出力
　　　　　　　　　　　　　　　　→　標準エラー出力

例. lsコマンド実行　カレントディレクトリ、ファイルが表示される
　　→標準出力に出力されたという


リダイレクト　　＞
例.　ls　＞　ls-output
     ｌｓの結果をls-outputに出力先を変更

　　cat > cat-output
　　　hello
    ctrl + Dで入力を終了　→　cat-outputにhelloという中身がある状態で確認できる。

エラー出力をリダイレクトを用いて、任意のファイルに出力
例. ls -l tekitou 2> ls-l-output →標準出力は”1”　標準エラー出力は”2”

パイプ　｜
前のコマンドの出力を後ろのコマンドの入力とする
コマンド　｜　コマンド

grep オプション　検索条件　指定ファイル


正規表現
＾行頭
＄行末
.任意の文字（.ひとつで１文字）
*直前文字の繰り返し
[...]..の中の任意の1字
[^...]..の文字が含まれない


基本コマンド

・タイムスタンプの更新　
touch オプション　ファイル名

・ファイル末尾や先頭行の一部を見る
先頭　head オプション　ファイル名
末尾　tail オプション　ファイル名

・ファイルの中身をソート
sort オプション　ファイル名

・直前行と同じ内容は出力しない（連続の場合のみ）
uniq ファイル名

・指定した文字毎に置き換える
tr 文字列1　文字列2

・ファイルの比較
diff オプション　ファイル1　ファイル2


Viエディタ
vimでも開きます。

保存　:w
閉じる :q
強制終了　:q!
保存して終了　:wq

インサートモード　i

行頭にインサート　I

カーソル後にインサート　a

行末にインサート　A

カーソル移動
下j 左h　上k　右l

次のページに移動　ctrl+f
前のページに移動  ctrl+b

〇〇行目に移動　:100

行頭に移動　ｇｇ
行末に移動　Ｇ

一字削除　x →　ｐで削除したものを張り付け

カットコピー　ｄｄ

普通のコピー　ｙｙ

1つ戻る　u

文字列の検索　/

文字列の置き換え　〇行目指定　　:2s/old/new/g  gオプションはその行のすべてのoldをnewにする
　　　　　　　　　全行置き換え　:%s/old/new/gc gcは確認メッセージが出る

管理者の仕事

・ユーザー情報
/etc/passwdで管理

useradd　ユーザー追加
usermod　ユーザー定義を変更
userdel　ユーザー削除

ユーザーの確認
grep ユーザー名　etc/passwd

ユーザーは必ずグループに所属している。メインとなるグループをプライマリーグループ

・グローブは/etc/groupで管理

groupadd グループ追加
groupmod　グループの定義を変更
groupdel　グループの削除

グループIDが存在するかの確認
grep groupID /etc/group

・パスワードは
/etc/passwdで管理

パスワードの変更は
passwd ユーザー名

グループを作成することにより、特定のグループに所属するユーザーのみアクセスできるディレクトリを作成。
特定のユーザーのみrootユーザーになれるという運用が可能

・rootユーザー
利用制限のない特別なユーザー

・suコマンド
別ユーザーでログインしているユーザーが、一時的に他のユーザーになるコマンド。
オプションで他のユーザーを指定しなけばrootユーザーでシェルを起動する。
-オプションを付けなければカレントディレクトリは変更されない
-オプション、－rootオプションを付ければカレントディレクトリをrootのホームディレクトリに変更してログインする。

最初からrootではなく、一般ユーザーからrootに切り替えるとログが残るため、その方が適切である。

・sudoコマンド
root権限でコマンドを実行できる。
→ユーザーを切り替えることなく、root権限が必要な設定や、プログラムを実行可能。
sudo -u →　任意のユーザーでコマンドを実行　
　　　　　　-uなければroot権限

sudoの設定は　/etc/sudoersファイル
visudoコマンドで実行できる。


ユーザー権限とアクセス権
ファイルの所有者変更
chown ユーザー　[.グループ] ディレクトリ
chown ユーザー　[.グループ] ファイル

グループの変更
chgrp グループ　ディレクトリ
chgrp グループ　ファイル

ls -l で表示の1つ目のカラムがファイルモードを示す

ｄ　ｒｗｘ　ｒｗｘ　ｒｗｘ　
左のブロックからファイル種別
所有ユーザー
所有グループ
その他となり、それぞれの意味は
r 読み込み可能
ｗ書き込み可能
ｘプログラムとして実行可能、ディレクトリの移動可能

アクセス権の変更
chmod モード　[.モード] ...ディレクトリ
chmod モード　[.モード] ...ファイル
chmod 8進数表記のモード　ディレクトリ
chmod 8進数表記のモード　ファイル

各モードについて
u 所有ユーザー
g　所属グループ
o　その他
＝設定
+加える
-削除
a すべてに同じ権限

ex. ユーザから r(読み込み権限) を除去、その他に w(書き込み権限) を追加）
     chmod u-r,o+w chownfile
         chmod{uユーザ・gグループ・oアザー)演算子　（r読む・w書く・x可能）}

シェルスクリプト
カーネルが提供する機能を操作する際に
OSと対話的に操作する必要があります。

シェルスクリプト
書き込んだプログラム・コマンドを実行させる

→1行目には利用するシェルの種類とコマンド位置を記述
ex.　#!/bin/bash

コメントアウトはJSと同じで＃

echo コマンド
引数で与えた文字列を標準出力に出力させるコマンド

変数の参照は＄を付ける

シェル変数は他のスクリプトに引き継がれないが
環境変数は引き継がれる

read コマンド
標準入力からデータを読み込み、すでにデータが入っていた場合
新しいデータに上書きされる

setコマンドはシェル変数の一覧を表示
envコマンドは環境変数の一覧を表示　　　→　両方とも削除するのはundetコマンド

引用符　'　”　’の３種類が存在　＄で参照される変数が展開される・されないがかわってくるため要確認

引数　＄数字　で表す　→　shiftコマンドは引数の順序をずらす

エスケープシーケンス　￥　文字の扱いを変えたいときに有効
　　　　　　　　　　　　　文末に入れると改行（railsの/brのような働きも持つ）

条件分岐
IF 条件式　then
elif 条件式
else 
fi
※railsではendだが間違えないように！！　fi!

演算子　a==b A!=B
        abが等しければ真
　　　　abが等しくなければ真

ファイル属性の確認
if test -d パス　; then
教科書P158で例題を実行

・くり返し for文
for 変数　in 値のリスト
do
      処理
done

・while/until文
while　条件が成立している間ループを繰り返す
until　条件が成立していない間ループを繰り返す

while 条件式
do 
       処理
done

until 条件式
do 
       処理
done

・select文
ユーザーに対し数値による入力を促す
select 変数　in リスト
do 
        処理
done

サブルーチン　→　一連の処理をまとめて再利用できるようにしたもの↓
　　　　　　　　　　　　　　　　　　　　　　　　　シェルスクリプトでは「関数」

ここはJSと同じ
function 関数名
｛
　処理
｝

関数名（）
｛
  処理
 }

シェルスクリプトのデバッグは　sh -xをつけて実行すると変数の中身やコマンドを確認しながらスクリプトを実行できる











































